package flow;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.StringReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.IVariable;
import com.avaya.sce.runtimecommon.IVariableField;

import flow.IProjectVariables;

/**
* A basic servlet which allows a user to define their code, generate
* any output, and to select where to transition to next.
* Last generated by Dialog Designer at: 2012-FEB-09  06:19:27 PM
*/
public class WS_DocStatus extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	
	//Web Service
	String agentid, cert_no, channel, docType, hospid, serviceMode, WSURL, XMLInputStr, result;
	IVariable docCode, docDate, docId, docName, docStatus, docSubCode, docTime, faxNumber, messageId;
	Integer timeout;
	
	// Cert Type
	boolean errorCode, errorMsg ; 
	String errorCodes, errorMsgs ;
	boolean boolDocCode, boolDocDate, boolDocId, boolDocName, boolDocStatus, boolDocSubCode, boolDocTime, boolFaxNumber, boolMessageId;

	
	//}}END:CLASS:FIELDS

	/**
	* Default constructor
	* Last generated by Dialog Designer at: 2012-FEB-09  06:19:27 PM
	*/
	public WS_DocStatus() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	* This method allows for custom integration with other Java components.
	* You may use Java for sophisticated logic or to integrate with custom
	* connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	*
	* Any custom code added here should work as efficiently as possible to prevent delays.
	* It's important to design your callflow so that the voice browser (Voice Portal/IR)
	* is not waiting too long for a response as this can lead to a poor caller experience.
	* Additionally, if the response to the client voice browser exceeds the configured
	* timeout, the platform may throw an "error.badfetch". 
	*
	* Using this method, you have access to all session variables through the 
	* SCESession object.
	*
	* The code generator will *** NOT *** overwrite this method in the future.
	* Last generated by Dialog Designer at: 2012-FEB-09  06:19:27 PM
	*/
	public void servletImplementation(final com.avaya.sce.runtimecommon.SCESession mySession) {

		// TODO: Add your code here!
		errorCode = false;
		errorMsg = false;
		
		//TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, ("\n BEFORE DOC CODE:"), mySession);
		
		docCode = mySession.getVariable(IProjectVariables.DOC_CODE);
		docDate = mySession.getVariable(IProjectVariables.DOC_DATE);
		docId = mySession.getVariable(IProjectVariables.DOC_ID);
		docName = mySession.getVariable(IProjectVariables.DOC_NAME);
		docStatus = mySession.getVariable(IProjectVariables.DOC_STATUS);
		docSubCode = mySession.getVariable(IProjectVariables.DOC_SUB_CODE);
		docTime = mySession.getVariable(IProjectVariables.DOC_TIME);
		faxNumber = mySession.getVariable(IProjectVariables.FAX_NUMBER);
		messageId = mySession.getVariable(IProjectVariables.MESSAGE_ID);
		
		docCode.addCollection();
		docDate.addCollection();
		docId.addCollection();
		docName.addCollection();
		docStatus.addCollection();
		docSubCode.addCollection();
		docTime.addCollection();
		faxNumber.addCollection();
		messageId.addCollection();
		
		//TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, ("\n AFTER DOC CODE:"), mySession);
		


		//Assign project variable into java variable
		//mySession.getVariable(IProjectVariables.ON_ERROR).getComplexVariable().getField("ErrorFlag").setValue(false);
		channel = mySession.getVariable(IProjectVariables.GENERAL).getComplexVariable().getField("flow").getStringValue();
		docType = mySession.getVariable(IProjectVariables.GENERAL).getComplexVariable().getField("reqdocflow").getStringValue();
		agentid = mySession.getVariable(IProjectVariables.EVENTS).getComplexVariable().getField("agent_id").getStringValue();
		cert_no = mySession.getVariable(IProjectVariables.EVENTS).getComplexVariable().getField("cert_no").getStringValue();
		hospid = mySession.getVariable(IProjectVariables.EVENTS).getComplexVariable().getField("hid_no").getStringValue();
		//WSURL="https://10.166.68.47:9446/PruBSNIVR/services/IVRValidation?wsdl";
		WSURL=mySession.getVariable(IProjectVariables.WEB_SERVICE_CONFIG).getComplexVariable().getField("WSURL_All").getStringValue();
		timeout=mySession.getVariable(IProjectVariables.WEB_SERVICE_CONFIG).getComplexVariable().getField("TimeOut").getIntValue();
		//ws_access=mySession.getVariable(IProjectVariables.WS__ACCESS).getSimpleVariable().getStringValue();
		
		
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, ("\n hospid:" + hospid), mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, ("\n docType:" + docType), mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, ("\n channel:" + channel), mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, ("\n cert_no:" + cert_no), mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, ("\n agentid:" + agentid), mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, ("\n WSURL:" + WSURL), mySession);
		
		
		//###################################### WEB SERVICE REQUEST ###################################################
		//Checking

		
		try
		{
			XMLInputStr="<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:impl=\"http://impl.ivr.prubsn.com\" xmlns:xsd=\"http://inputVO.ivr.prubsn.com/xsd\">"+
			"<soap:Header/>"+
			"<soap:Body>"+
			"<impl:docStatus>"+
			"<impl:docStatusInputVO>"+
			"<xsd:chnInd>" + channel + "</xsd:chnInd>"+
			"<xsd:certificateNumber>" + cert_no + "</xsd:certificateNumber>"+
			"<xsd:agentId>" + agentid + "</xsd:agentId>"+
			"<xsd:reqProgFlow>" + docType + "</xsd:reqProgFlow>"+
			"<xsd:hospId>" + hospid + "</xsd:hospId>"+
			"</impl:docStatusInputVO>"+
			"</impl:docStatus>"+
			"</soap:Body>"+
			"</soap:Envelope>";
			
			
			URL url = new URL(WSURL);
			URLConnection con = url.openConnection();
			HttpURLConnection httpUrlConnInfWebSvc = (HttpURLConnection)con;
			
			String SOAPAction ="urn:docStatus";
			con.setRequestProperty("SOAPAction",  SOAPAction);
			con.setDoInput(true);
			con.setRequestProperty ( "Content-Type", "application/soap+xml; charset=UTF-8" );
			con.setDoOutput(true);
			//con.setReadTimeout(timeout);
			con.setUseCaches (false);
			con.setDefaultUseCaches (false);
			
			//================ Post HTTP input stream ===========================
			OutputStreamWriter writer = new OutputStreamWriter( con.getOutputStream());
			
			//TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, ("\n XML Posted:" + XMLInputStr), mySession);
			System.out.println( "\n XML Posted:" + XMLInputStr );
			writer.write(XMLInputStr);
			writer.flush();
			writer.close();
			
			//================== Get Web Service Response =============================	        
			BufferedReader reader = new BufferedReader (new InputStreamReader(con.getInputStream())); 
			//InputStreamReader reader = new InputStreamReader( con.getInputStream()); 
			
			StringBuilder buf = new StringBuilder();
			char[] cbuf = new char[ 2048 ];
			int num;
			
			while ( -1 != (num=reader.read( cbuf )))
			{
				buf.append( cbuf, 0, num );
			}
			
			result = buf.toString();

			//TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, (result), mySession);
			
			/**
			try{
				Writer output = null;
					if(result != "")
					{
						File file = new File(mySession.getVariable(IProjectVariables.WEB_SERVICE).getComplexVariable().getField("SNXMLPath").getStringValue());
									
						output = new BufferedWriter(new FileWriter(file));
						output.write(result);
						output.close();
					}
				}
				catch(IOException e)
				{	
					System.out.println("WriteFailed");
				}		    
			**/
			//mySession.getVariable(IProjectVariables.EVENTS).getComplexVariable().getField("XMLResult").setValue(result);
			
			//System.err.println( "\n Response from server after POST:" + result );
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, ("\n XML Result:" + result), mySession);
			httpUrlConnInfWebSvc.disconnect();
			
			reader.close();
		} // end try
		catch (Throwable t)
		{
			t.printStackTrace( System.out );
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, (t.getMessage().toString()), mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, ("http request Failed"), mySession);
			//System.out.println("@@@@@@ TMGO SN http request Failed");
			//mySession.getVariable(IProjectVariables.EVENTS).getComplexVariable().getField("DocReq_timeout").setValue("1");
		}
		
		
		
		//###################################### END OF WEB SERVICE REQUEST ###################################################
		
		try{
			//System.err.println( "\n @@@@@@ Check result= " + result );
			SAXParserFactory factory = SAXParserFactory.newInstance();
			SAXParser saxParser = factory.newSAXParser();
			
			//System.out.println( "\n XML Check = " + xmlStr );
			
			DefaultHandler handler = new DefaultHandler(){

				public void startElement(String uri, String localName,String qName, Attributes attributes) throws SAXException {
					//System.out.println("Start Element :" + qName);		
					
					if (qName.equalsIgnoreCase("ax25:docCode")) {
						boolDocCode = true;
					}
					
					if (qName.equalsIgnoreCase("ax25:docDate")) {
						boolDocDate = true;
					}
					
					if (qName.equalsIgnoreCase("ax25:docId")) {
						boolDocId = true;
					}
					
					if (qName.equalsIgnoreCase("ax25:docName")) {
						boolDocName = true;
					}
					
					if (qName.equalsIgnoreCase("ax25:docStatus")) {
						boolDocStatus = true;
					}
					
					if (qName.equalsIgnoreCase("ax25:docSubCode")) {
						boolDocSubCode = true;
					}
					
					if (qName.equalsIgnoreCase("ax25:docTime")) {
						boolDocTime = true;
					}
					
					if (qName.equalsIgnoreCase("ax25:faxNumber")) {
						boolFaxNumber = true;
					}
					
					if (qName.equalsIgnoreCase("ax25:messageId")) {
						boolMessageId = true;
					}					
					
					if (qName.equalsIgnoreCase("ax23:errorCode")) {
						errorCode = true;
					}
					
					if (qName.equalsIgnoreCase("ax23:errorMsg")) {
						errorMsg = true;
					}
					
					
				}
				
				public void endElement(String uri, String localName,String qName, Attributes attributes) throws SAXException {
					//System.out.println("Start Element :" + qName);			
					
					if (qName.equalsIgnoreCase("ax25:docCode")) {
						boolDocCode = false;
					}
					
					if (qName.equalsIgnoreCase("ax25:docDate")) {
						boolDocDate = false;
					}
					
					if (qName.equalsIgnoreCase("ax25:docId")) {
						boolDocId = false;
					}
					
					if (qName.equalsIgnoreCase("ax25:docName")) {
						boolDocName = false;
					}
					
					if (qName.equalsIgnoreCase("ax25:docStatus")) {
						boolDocStatus = false;
					}
					
					if (qName.equalsIgnoreCase("ax25:docSubCode")) {
						boolDocSubCode = false;
					}
					
					if (qName.equalsIgnoreCase("ax25:docTime")) {
						boolDocTime = false;
					}
					
					if (qName.equalsIgnoreCase("ax25:faxNumber")) {
						boolFaxNumber = false;
					}
					
					if (qName.equalsIgnoreCase("ax25:messageId")) {
						boolMessageId = true;
					}						
					
					if (qName.equalsIgnoreCase("ax23:errorCode")) {
						errorCode = false;
					}
					
					if (qName.equalsIgnoreCase("ax23:errorMsg")) {
						errorMsg = false;
					}					
					
				}				
				
				public void characters(char ch[], int start, int length) throws SAXException {
					
					if (boolDocCode) {
						String docCodeValue = new String(ch, start, length);
						TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, ("\n  Doc Code:" + docCodeValue), mySession);
						docCode.getSimpleVariable().setValue(docCodeValue.trim());
						docCode.getCollection().append();
						boolDocCode = false;
					}
					
					if (boolDocDate) {
						String docDateValue = new String(ch, start, length);
						TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, ("\n  Doc Date:" + docDateValue), mySession);
						docDate.getSimpleVariable().setValue(docDateValue.trim());
						docDate.getCollection().append();
						boolDocDate = false;
					}
					
					if (boolDocId) {
						String docIdValue = new String(ch, start, length);
						TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, ("\n  Doc Id:" + docIdValue), mySession);
						docId.getSimpleVariable().setValue(docIdValue.trim());
						docId.getCollection().append();
						boolDocId = false;
					}
					
					if (boolDocName) {
						String docNameValue = new String(ch, start, length);
						TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, ("\n  Doc Name:" + docNameValue), mySession);
						docName.getSimpleVariable().setValue(docNameValue.trim());
						docName.getCollection().append();
						boolDocName = false;
					}
					
					if (boolDocStatus) {
						String docStatusValue = new String(ch, start, length);
						TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, ("\n  Doc Status:" + docStatusValue), mySession);
						docStatus.getSimpleVariable().setValue(docStatusValue.trim());
						docStatus.getCollection().append();
						boolDocStatus = false;
					}
					
					if (boolDocSubCode) {
						String docSubCodeValue = new String(ch, start, length);
						TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, ("\n  Doc Sub Code:" + docSubCodeValue), mySession);
						docSubCode.getSimpleVariable().setValue(docSubCodeValue.trim());
						docSubCode.getCollection().append();
						boolDocSubCode = false;
					}
					
					if (boolDocTime) {
						String docTimeValue = new String(ch, start, length);
						TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, ("\n  Doc Time:" + docTimeValue), mySession);
						docTime.getSimpleVariable().setValue(docTimeValue.trim());
						docTime.getCollection().append();
						boolDocTime = false;
					}
					
					if (boolFaxNumber) {
						String faxNumberValue = new String(ch, start, length);
						TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, ("\n  Fax Number:" + faxNumberValue), mySession);
						faxNumber.getSimpleVariable().setValue(faxNumberValue.trim());
						faxNumber.getCollection().append();
						boolFaxNumber = false;
					}
					
					if (boolMessageId) {
						String messageIdValue = new String(ch, start, length);
						TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, ("\n  Message Id:" + messageIdValue), mySession);
						messageId.getSimpleVariable().setValue(messageIdValue.trim());
						messageId.getCollection().append();
						boolMessageId = false;
					}					
					
					if(errorCode){ 
						String err_value = new String(ch, start,length);
						errorCodes = err_value.trim();
						errorCode = false;
					}
					
					if(errorMsg){ 
						String errmsg_value = new String(ch, start,length);
						errorMsgs = errmsg_value;
						errorMsg = false;
					}
					

				}
				
				
			};
			
			saxParser.parse(new InputSource(new StringReader(result)), handler);
			docCode.getCollection().reset();	
			if (docCode.getCollection().hasMore()) docCode.getCollection().next();	
			docDate.getCollection().reset();	
			if (docDate.getCollection().hasMore()) docDate.getCollection().next();	
			docId.getCollection().reset();	
			if (docId.getCollection().hasMore()) docId.getCollection().next();	
			docName.getCollection().reset();	
			if (docName.getCollection().hasMore()) docName.getCollection().next();	
			docStatus.getCollection().reset();	
			if (docStatus.getCollection().hasMore()) docStatus.getCollection().next();	
			docSubCode.getCollection().reset();	
			if (docSubCode.getCollection().hasMore()) docSubCode.getCollection().next();	
			docTime.getCollection().reset();	
			if (docTime.getCollection().hasMore()) docTime.getCollection().next();	
			faxNumber.getCollection().reset();	
			if (faxNumber.getCollection().hasMore()) faxNumber.getCollection().next();	
			messageId.getCollection().reset();	
			if (messageId.getCollection().hasMore()) messageId.getCollection().next();	

			
			
			//System.out.println("===================== Summary =========================");


			
		}catch(Exception e){
			e.printStackTrace();
		}
		
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, ("\n errorCodes:" + errorCodes), mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, ("\n errorMsgs:" + errorMsgs), mySession);
		
		
		mySession.getVariable(IProjectVariables.WEB_SER_FAX_DOC).getComplexVariable().getField("Code").setValue(errorCodes);
		mySession.getVariable(IProjectVariables.WEB_SER_FAX_DOC).getComplexVariable().getField("Msg").setValue(errorMsgs);
		
	} // public void servletImplementation
	
	
	
	/**
	* Builds the list of branches that are defined for this servlet object.
	* This list is built automatically by defining Goto nodes in the call flow editor.
	* It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	*
	* The user should override updateBranches() to determine which Goto that the
	* framework will activate.  If there is not at least one enabled Goto item, 
	* the framework will throw a runtime exception.<BR>
	*
	* This method is generated automatically and changes to it may
	* be overwritten next time code is generated.  To modify the list
	* of branches for the flow item, override:
	*     <code>updateBranches(Collection branches, SCESession mySession)</code>
	*
	* @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	* objects that will be evaluated at runtime.  If there are no gotos
	* defined in the Servlet node, then this returns null.
	* Last generated by Orchestration Designer at: 2017-MAY-09  03:34:38 PM
	*/
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("DocStaRes", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
